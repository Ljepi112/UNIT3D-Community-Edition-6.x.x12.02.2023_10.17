<?php

namespace Tests\Todo\Feature\Http\Controllers;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\UserController
 */
class UserControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function accept_rules_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->post(route('accept.rules'), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function active_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('users.peers.index', ['user' => $user]));

        $response->assertOk();
        $response->assertViewIs('user.peer.index');
        $response->assertViewHas('user');
        $response->assertViewHas('route');
        $response->assertViewHas('his_upl');
        $response->assertViewHas('his_upl_cre');
        $response->assertViewHas('his_downl');
        $response->assertViewHas('his_downl_cre');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function change_api_token_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post(route('change_api_token', ['username' => $user->username]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withSuccess('Your API Token Was Changed Successfully!'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function change_p_i_d_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post(route('change_pid', ['username' => $user->username]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withSuccess('Your PID Was Changed Successfully!'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function change_r_i_d_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post(route('change_rid', ['username' => $user->username]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withSuccess('Your RID Was Changed Successfully!'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function change_settings_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post(route('users.general_settings.update', ['user' => $user]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withErrors('The URL for the external CSS stylesheet is invalid, try it again with a valid URL.'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function download_history_torrents_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('users.torrent_zip.show', ['user' => $user]));

        $response->assertRedirect(withErrors('Torrent File Not Found! Please Report This Torrent!'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_profile_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post(route('user_edit_profile', ['username' => $user->username]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withErrors('Because you are uploading a GIF, your avatar must be square!'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_profile_form_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('user_edit_profile_form', ['username' => $user->username]));

        $response->assertOk();
        $response->assertViewIs('user.profile.edit');
        $response->assertViewHas('user');
        $response->assertViewHas('route');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function followers_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('users.followers.index', ['user' => $user]));

        $response->assertOk();
        $response->assertViewIs('user.follower.index');
        $response->assertViewHas('route');
        $response->assertViewHas('results');
        $response->assertViewHas('user');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function get_bans_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('users.bans.index', ['user' => $user]));

        $response->assertOk();
        $response->assertViewIs('user.ban.index');
        $response->assertViewHas('user');
        $response->assertViewHas('bans');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function my_filter_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post(route('myfilter', ['username' => $user->username]), [
            // TODO: send request data
        ]);

        $response->assertOk();
        $response->assertViewIs();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function notification_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('users.notification_settings.edit', ['user' => $user]));

        $response->assertOk();
        $response->assertViewIs('user.notification_setting.edit');
        $response->assertViewHas('user');
        $response->assertViewHas('groups');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function posts_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('users.posts.index', ['user' => $user]));

        $response->assertOk();
        $response->assertViewIs('user.post.index');
        $response->assertViewHas('route');
        $response->assertViewHas('results');
        $response->assertViewHas('user');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function privacy_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('user_privacy', ['username' => $user->username]));

        $response->assertOk();
        $response->assertViewIs('user.privacy_setting.edit');
        $response->assertViewHas('user');
        $response->assertViewHas('groups');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function requested_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('user_requested', ['username' => $user->username]));

        $response->assertOk();
        $response->assertViewIs($logger);
        $response->assertViewHas('route');
        $response->assertViewHas('user');
        $response->assertViewHas('torrentRequests');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function resurrections_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('users.resurrections.index', ['username' => $user->username]));

        $response->assertOk();
        $response->assertViewIs('user.resurrection.index');
        $response->assertViewHas('route');
        $response->assertViewHas('user');
        $response->assertViewHas('resurrections');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function security_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('user_security', ['username' => $user->username]));

        $response->assertOk();
        $response->assertViewIs('user.settings.security.index');
        $response->assertViewHas('user');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function settings_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('users.general_settings.edit', ['user' => $user]));

        $response->assertOk();
        $response->assertViewIs('user.general_setting.edit');
        $response->assertViewHas('user');
        $response->assertViewHas('route');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('users.show', ['username' => $user->username]));

        $response->assertOk();
        $response->assertViewIs('user.profile.show');
        $response->assertViewHas('route');
        $response->assertViewHas('user');
        $response->assertViewHas('groups');
        $response->assertViewHas('followers');
        $response->assertViewHas('history');
        $response->assertViewHas('warnings');
        $response->assertViewHas('hitrun');
        $response->assertViewHas('bonupload');
        $response->assertViewHas('realupload');
        $response->assertViewHas('bondownload');
        $response->assertViewHas('realdownload');
        $response->assertViewHas('requested');
        $response->assertViewHas('filled');
        $response->assertViewHas('invitedBy');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function topics_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('users.topics.index', ['username' => $user->username]));

        $response->assertOk();
        $response->assertViewIs('user.topic.index');
        $response->assertViewHas('route');
        $response->assertViewHas('results');
        $response->assertViewHas('user');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function torrents_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('users.history.index', ['user' => $user]));

        $response->assertOk();
        $response->assertViewIs('user.history.index');
        $response->assertViewHas('route');
        $response->assertViewHas('user');
        $response->assertViewHas('his_upl');
        $response->assertViewHas('his_upl_cre');
        $response->assertViewHas('his_downl');
        $response->assertViewHas('his_downl_cre');

        // TODO: perform additional assertions
    }

    // test cases...
}
